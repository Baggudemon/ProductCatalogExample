@page "/productTypeEdit"

@using ProductCatalog.DB.Entities
@using ProductCatalog.Services

@inject ProductRepository productRepository

<h3>Product Type Edit</h3>

<table class="table">
    <thead>
        <tr>
            <th>Name</th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var productType in productTypes)
        {
            <tr>
                <td>
                    @if (IsEditing(productType.Id))
                    {
                        <input type="text" class="form-control" @bind="@productType.Name" />
                    }
                    else
                    {
                        @productType.Name
                    }
                </td>
                <td>
                    @if (IsEditing(productType.Id))
                    {
                        <button class="btn btn-link" @onclick="() => SaveChanges(productType)">Save</button>
                        <button class="btn btn-link" @onclick="CancelEdit">Cancel</button>
                        <button class="btn btn-link" @onclick="() => DeleteProductType(productType)">
                            <i class="bi bi-x"></i> Delete
                        </button>
                    }
                    else
                    {
                        <button class="btn btn-link" @onclick="() => EditProductType(productType.Id)">Edit</button>
                    }
                </td>
            </tr>
        }
        @if (showAddProductTypeRow)
        {
            <tr>
                <td>
                    <input type="text" class="form-control @(IsNewProductTypeValid ? "is-invalid" : "")" @bind="@newProductType.Name" placeholder="Enter Name" />
                    @if (IsNewProductTypeValid)
                    {
                        <div class="invalid-feedback">Name is required.</div>
                    }
                </td>
                <td>
                    <button class="btn btn-link" @onclick="AddProductType">Add</button>
                </td>
            </tr>
        }
    </tbody>
</table>

<div class="row mt-3">
    <div class="col">
        <button class="btn btn-link" @onclick="ToggleAddProductTypeRow">@(!showAddProductTypeRow ? "Add Product Type" : "Hide Add Product Type")</button>
    </div>
</div>

@code {
    List<ProductType> productTypes = new List<ProductType>();

    ProductType newProductType = new ProductType();
    
    int? editingProductTypeId = null;
    bool hasAddProductTypeError;
    bool showAddProductTypeRow;

    protected override async Task OnInitializedAsync()
    {
        await LoadProductTypes();
        showAddProductTypeRow = false;
    }

    private bool IsNewProductTypeValid => string.IsNullOrEmpty(newProductType.Name) && hasAddProductTypeError;
    
    private bool IsEditing(int productTypeId) => productTypeId == editingProductTypeId;

    private async Task LoadProductTypes()
    {
        productTypes = await productRepository.GetProductTypes();
    }

    private void ToggleAddProductTypeRow()
    {
        showAddProductTypeRow = !showAddProductTypeRow;
        newProductType = new ProductType();
    }

    private void EditProductType(int productTypeId)
    {
        editingProductTypeId = productTypeId;
    }

    private async Task CancelEdit()
    {
        editingProductTypeId = null;
        await LoadProductTypes();
    }

    private async Task SaveChanges(ProductType productType)
    {
        await productRepository.UpdateProductType(productType);
        editingProductTypeId = null;
        await LoadProductTypes();
    }

    private async Task DeleteProductType(ProductType productType)
    {
        await productRepository.DeleteProductType(productType);
        await LoadProductTypes();
    }

    private async Task AddProductType()
    {
        hasAddProductTypeError = string.IsNullOrEmpty(newProductType.Name);
        if (hasAddProductTypeError)
            return;

        await productRepository.AddProductType(newProductType);
        await LoadProductTypes();

        showAddProductTypeRow = false;
        newProductType = new ProductType();
    }
}